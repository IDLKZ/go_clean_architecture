// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: copyfrom.go

package generated

import (
	"context"
)

// iteratorForBulkCreatePermissions implements pgx.CopyFromSource.
type iteratorForBulkCreatePermissions struct {
	rows                 []BulkCreatePermissionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkCreatePermissions) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkCreatePermissions) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].TitleRu,
		r.rows[0].TitleEn,
		r.rows[0].TitleKk,
		r.rows[0].DescriptionRu,
		r.rows[0].DescriptionEn,
		r.rows[0].DescriptionKk,
		r.rows[0].Value,
	}, nil
}

func (r iteratorForBulkCreatePermissions) Err() error {
	return nil
}

// ============================================================================
// BULK OPERATIONS
// ============================================================================
func (q *Queries) BulkCreatePermissions(ctx context.Context, arg []BulkCreatePermissionsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"permissions"}, []string{"id", "title_ru", "title_en", "title_kk", "description_ru", "description_en", "description_kk", "value"}, &iteratorForBulkCreatePermissions{rows: arg})
}

// iteratorForBulkCreateRolePermissions implements pgx.CopyFromSource.
type iteratorForBulkCreateRolePermissions struct {
	rows                 []BulkCreateRolePermissionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkCreateRolePermissions) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkCreateRolePermissions) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].RoleID,
		r.rows[0].PermissionID,
	}, nil
}

func (r iteratorForBulkCreateRolePermissions) Err() error {
	return nil
}

// ============================================================================
// BULK OPERATIONS
// ============================================================================
func (q *Queries) BulkCreateRolePermissions(ctx context.Context, arg []BulkCreateRolePermissionsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"role_permissions"}, []string{"id", "role_id", "permission_id"}, &iteratorForBulkCreateRolePermissions{rows: arg})
}

// iteratorForBulkCreateRoles implements pgx.CopyFromSource.
type iteratorForBulkCreateRoles struct {
	rows                 []BulkCreateRolesParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkCreateRoles) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkCreateRoles) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].TitleRu,
		r.rows[0].TitleEn,
		r.rows[0].TitleKk,
		r.rows[0].DescriptionRu,
		r.rows[0].DescriptionEn,
		r.rows[0].DescriptionKk,
		r.rows[0].Value,
	}, nil
}

func (r iteratorForBulkCreateRoles) Err() error {
	return nil
}

// ============================================================================
// BULK OPERATIONS
// ============================================================================
func (q *Queries) BulkCreateRoles(ctx context.Context, arg []BulkCreateRolesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"roles"}, []string{"id", "title_ru", "title_en", "title_kk", "description_ru", "description_en", "description_kk", "value"}, &iteratorForBulkCreateRoles{rows: arg})
}
