package main

import (
	"clean_architecture_fiber/cmd/seed"
	"clean_architecture_fiber/config"
	"clean_architecture_fiber/core/dependecy_injection"
	i18nPkg "clean_architecture_fiber/pkg/i18n"
	"context"
	"log"

	"github.com/jackc/pgx/v5/pgxpool"
	"go.uber.org/fx"
)

// main —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î, i18n, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–¥–µ—Ä—ã –∏ Fiber —Å–µ—Ä–≤–µ—Ä
func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (i18n)
	log.Println("üåç Initializing i18n...")
	if err := i18nPkg.Init(); err != nil {
		log.Fatalf("‚ùå Failed to initialize i18n: %v", err)
	}
	log.Printf("‚úÖ i18n initialized (supported languages: %v)", i18nPkg.SupportedLanguages)

	// –°–æ–∑–¥–∞–µ–º Fx –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
	app := fx.New(
		// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
		fx.Provide(func() *config.Config {
			log.Println("üìã Loading application configuration...")
			return config.LoadAppConfig()
		}),
		// –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
		dependecy_injection.AppModule,
		// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–¥–µ—Ä—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
		fx.Invoke(func(lc fx.Lifecycle, pool *pgxpool.Pool) {
			lc.Append(fx.Hook{
				OnStart: func(ctx context.Context) error {
					log.Println("üå± Running database seeders...")
					seed.RunSeeders(ctx, pool)
					return nil
				},
			})
		}),
	)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∂–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	app.Run()
}
