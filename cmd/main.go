package main

import (
	"clean_architecture_fiber/cmd/seed"
	"clean_architecture_fiber/cmd/server"
	"clean_architecture_fiber/config"
	i18nPkg "clean_architecture_fiber/pkg/i18n"
	"context"
	"github.com/jackc/pgx/v5/pgxpool"
	"log"
	"os"
	"os/signal"
	"syscall"
)

// main —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î, i18n, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–¥–µ—Ä—ã –∏ Fiber —Å–µ—Ä–≤–µ—Ä
func main() {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (i18n)
	log.Println("üåç Initializing i18n...")
	if err := i18nPkg.Init(); err != nil {
		log.Fatalf("‚ùå Failed to initialize i18n: %v", err)
	}
	log.Printf("‚úÖ i18n initialized (supported languages: %v)", i18nPkg.SupportedLanguages)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	log.Println("üìã Loading application configuration...")
	cfg := config.LoadAppConfig()

	// –ü–æ–ª—É—á–∞–µ–º DSN –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dsn := cfg.GetDatabaseURL()
	log.Printf("üîå Connecting to database: %s", cfg.Database.Name)

	// –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ PostgreSQL
	pool, err := pgxpool.New(ctx, dsn)
	if err != nil {
		log.Fatalf("‚ùå Failed to connect to database: %v", err)
	}
	defer pool.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := pool.Ping(ctx); err != nil {
		log.Fatalf("‚ùå Failed to ping database: %v", err)
	}
	log.Println("‚úÖ Database connection established")

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–¥–µ—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	log.Println("üå± Running database seeders...")
	seed.RunSeeders(ctx, pool)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Fiber —Å–µ—Ä–≤–µ—Ä
	log.Printf("üöÄ Starting %s server on port %d...", cfg.App.Name, cfg.App.Port)
	server.SettleFiberApp(cfg, ctx, pool)

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C, SIGTERM)
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt, syscall.SIGTERM)
	<-quit

	log.Println("üõë Shutting down server gracefully...")
}
